name: 'Build OpenWRT Image'
description: 'Builds an OpenWRT firmware image with TollGate packages'
branding:
  color: orange
  icon: box

inputs:
  model:
    description: 'The device model to build for'
    required: true
  version:
    description: 'OpenWRT version'
    default: '23.05.3'
  nostr_secret_key:
    description: 'Nostr secret key'
    required: true
  nostr_public_key:
    description: 'Nostr public key'
    required: true
  nostr_relays:
    description: 'Comma-separated list of Nostr relays'
    default: 'wss://relay.damus.io,wss://nos.lol,wss://nostr.mom'
  base_packages:
    description: 'Base packages to include'
    default: >-
      base-files busybox ca-bundle dnsmasq dropbear firewall4 fstools 
      kmod-gpio-button-hotplug kmod-leds-gpio kmod-nft-offload libc libgcc 
      libustream-mbedtls logd mtd netifd nftables odhcp6c opkg ppp 
      ppp-mod-pppoe procd procd-seccomp procd-ujail swconfig uci 
      uclient-fetch urandom-seed urngd openssh-sftp-server opennds

outputs:
  firmware_path:
    description: 'Path to the built firmware file'
    value: ${{ steps.find-firmware.outputs.firmware_path }}
  firmware_name:
    description: 'Name of the built firmware file'
    value: ${{ steps.find-firmware.outputs.firmware_name }}

runs:
  using: "composite"
  steps:
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install System Dependencies
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          gawk \
          build-essential \
          curl \
          zstd \
          libssl-dev
        python -m pip install --upgrade pip
        pip install nostr

    - name: Set Build Variables
      id: vars
      shell: bash
      run: |
        case "${{ inputs.model }}" in
          "gl-ar300m")
            echo "PLATFORM=ath79" >> $GITHUB_ENV
            echo "TYPE=generic" >> $GITHUB_ENV
            echo "TARGET_DEVICE=ath79-generic" >> $GITHUB_ENV
            echo "PROFILE=glinet_gl-ar300m16" >> $GITHUB_ENV
            echo "BLOSSOM_ARCH=mips_24kc" >> $GITHUB_ENV
            echo "EXTRA_PACKAGES=uboot-envtools kmod-usb2 kmod-usb-core kmod-usb-storage luci luci-ssl iwinfo wpad-wolfssl" >> $GITHUB_ENV
            echo "REMOVED_PACKAGES=-odhcpd -odhcpd-ipv6only -wpad-basic-wolfssl -wpad-basic-mbedtls -wpad-mini" >> $GITHUB_ENV
            ;;
          "gl-mt3000"|"gl-mt6000")
            echo "PLATFORM=mediatek" >> $GITHUB_ENV
            echo "TYPE=filogic" >> $GITHUB_ENV
            echo "TARGET_DEVICE=mediatek-filogic" >> $GITHUB_ENV
            echo "PROFILE=glinet_${{ inputs.model }}" >> $GITHUB_ENV
            echo "BLOSSOM_ARCH=aarch64_cortex-a53" >> $GITHUB_ENV
            echo "EXTRA_PACKAGES=kmod-usb2 kmod-usb-core kmod-usb-storage luci luci-ssl iwinfo wpad-wolfssl" >> $GITHUB_ENV
            echo "REMOVED_PACKAGES=-odhcpd -odhcpd-ipv6only -wpad-basic-wolfssl -wpad-basic-mbedtls -wpad-mini" >> $GITHUB_ENV
            ;;
        esac
        echo "BUILDDIR=/tmp/openwrt-build" >> $GITHUB_ENV

    - name: Setup Build Directory
      shell: bash
      run: |
        mkdir -p $BUILDDIR
        
        if [ "${{ inputs.version }}" = "snapshot" ]; then
          IMAGEBUILDER_NAME="openwrt-imagebuilder-${PLATFORM}-${TYPE}.Linux-x86_64"
          DOWNLOAD_URL="https://downloads.openwrt.org/snapshots/targets/${PLATFORM}/${TYPE}/${IMAGEBUILDER_NAME}.tar.zst"
          echo "ARCHIVE_EXT=tar.zst" >> $GITHUB_ENV
        else
          IMAGEBUILDER_NAME="openwrt-imagebuilder-${{ inputs.version }}-${TARGET_DEVICE}.Linux-x86_64"
          DOWNLOAD_URL="https://downloads.openwrt.org/releases/${{ inputs.version }}/targets/${PLATFORM}/${TYPE}/${IMAGEBUILDER_NAME}.tar.xz"
          echo "ARCHIVE_EXT=tar.xz" >> $GITHUB_ENV
        fi
        
        echo "IMAGEBUILDER_NAME=${IMAGEBUILDER_NAME}" >> $GITHUB_ENV
        echo "DOWNLOAD_URL=${DOWNLOAD_URL}" >> $GITHUB_ENV

    - name: Download and Extract ImageBuilder
      shell: bash
      run: |
        cd $BUILDDIR
        if curl --output /dev/null --silent --head --fail "$DOWNLOAD_URL"; then
          curl -L -C - -O "$DOWNLOAD_URL"
          if [ "${{ inputs.version }}" = "snapshot" ]; then
            tar --zstd -xf "${IMAGEBUILDER_NAME}.${ARCHIVE_EXT}"
          else
            tar xfJ "${IMAGEBUILDER_NAME}.${ARCHIVE_EXT}"
          fi
        else
          echo "Error: URL $DOWNLOAD_URL does not exist"
          exit 1
        fi

    - name: Setup Custom Files and Packages
      shell: bash
      env:
        NOSTR_SECRET_KEY: ${{ inputs.nostr_secret_key }}
        NOSTR_PUBLIC_KEY: ${{ inputs.nostr_public_key }}
        NOSTR_RELAYS: ${{ inputs.nostr_relays }}
      run: |
        cp -r files $BUILDDIR/${IMAGEBUILDER_NAME}/
        PACKAGES_DIR="${BUILDDIR}/${IMAGEBUILDER_NAME}/packages/local"
        mkdir -p "${PACKAGES_DIR}"

    - name: Generate Package Index
      shell: bash
      run: |
        cd ${BUILDDIR}/${IMAGEBUILDER_NAME}
        sudo bash -c 'mkhash() { if [ "$1" = "sha256" ]; then sha256sum "$2" | cut -d" " -f1; else sha256sum "$1" | cut -d" " -f1; fi; }; \
        export -f mkhash; \
        export MKHASH=mkhash; \
        ./scripts/ipkg-make-index.sh packages/local > packages/local/Packages && \
        gzip -9c packages/local/Packages > packages/local/Packages.gz'

    - name: Build Firmware
      shell: bash
      run: |
        COMBINED_PACKAGE_LIST="${REMOVED_PACKAGES} ${{ inputs.base_packages }} ${EXTRA_PACKAGES}"
        cd ${BUILDDIR}/${IMAGEBUILDER_NAME}
        sudo make -j$(nproc) image \
          PROFILE="${PROFILE}" \
          PACKAGES="${COMBINED_PACKAGE_LIST}" \
          FILES="${BUILDDIR}/${IMAGEBUILDER_NAME}/files"

    - name: Find Firmware File
      id: find-firmware
      shell: bash
      run: |
        FIRMWARE_PATH=$(find ${BUILDDIR}/${IMAGEBUILDER_NAME}/bin/targets/${PLATFORM}/${TYPE}/ -name "*${PROFILE}*sysupgrade.bin" -type f)
        if [ -f "$FIRMWARE_PATH" ]; then
          echo "firmware_path=${FIRMWARE_PATH}" >> $GITHUB_OUTPUT
          echo "firmware_name=$(basename ${FIRMWARE_PATH})" >> $GITHUB_OUTPUT
        else
          echo "Error: Firmware file not found!"
          exit 1
        fi

